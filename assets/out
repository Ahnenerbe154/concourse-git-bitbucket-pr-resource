#!/usr/bin/env bash
# vim: set ft=sh

set -euo pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type=$(jq -r '.source.bitbucket_type // "server"' < "${payload}")
base_url=$(jq -r '.source.base_url // ""' < "${payload}")
username=$(jq -r '.source.username // ""' < "${payload}")
password=$(jq -r '.source.password // ""' < "${payload}")
project=$(jq -r '.source.project // ""' < "${payload}")
repository=$(jq -r '.source.repository // ""' < "${payload}")
dir=$(jq -r '.source.dir // ""' < "${payload}")
params=$(jq -rc '.params' < "${payload}")

cd "${dir:-$repository}"

pr=$(cat pull-request-info)

eval_param() {
    eval echo "$(jq -r "${1}" <<< "${params}")"
}

change_pr_state() {
    if [[ ! "${base_url}" ]]; then
        echo "error: source.base_url can't be empty"
        exit 1
    fi

    commit=$(echo "${pr}" | jq -r '.commit')

    if [[ "${bitbucket_type}" == "server" ]]; then
        url="${base_url}/rest/build-status/1.0/commits/${commit}"
    elif [[ "${bitbucket_type}" == "cloud" ]]; then
        url="${base_url}/api/2.0/repositories/${project}/${repository}/commit/${commit}/statuses/build"
    else
        echo "error: incorrect bitbucket server type '${bitbucket_type}'"
        exit 1
    fi

    json=$(jq -n \
        --argjson params "${params}" \
        --arg key "$(eval_param '.key // ""')" \
        --arg name "$(eval_param '.name // ""')" \
        --arg description "$(eval_param '.description // ""')" \
        '{
            state: $params.state,
            key: (if $key != "" then $key else $name end),
            name: ((if $key != "" then $key else $name end) + "-" + env.BUILD_ID),
            url: (
                .params.url // (
                    "\(env.ATC_EXTERNAL_URL)/builds/\(env.BUILD_ID)"
                )
            ),
            description: $description|tostring
        }'
    )

    curl --fail \
        -u "${username}:${password}" \
        -H "Content-Type: application/json" \
        -XPOST "${url}" \
        -d "${json}"

    jq -n --argjson pr "${pr}" '{
        version: {
            id: $pr.id|tostring,
            branch: $pr.feature_branch,
            commit: $pr.commit
        }
    }' >&3
}

change_pr_state
